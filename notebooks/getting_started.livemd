<!-- livebook:{"autosave_interval_s":600} -->

# runelixir.com examples

```elixir
Mix.install([
  {:kino, "~> 0.14.0"}
])
```

## IO

```elixir
name = "peter"
age = "32"
IO.inspect([name, age])
IO.inspect("hello my name is #{name} and i am #{age} years old")
```

## Tuples

```elixir
form =
  Kino.Control.form(
    [
      name: Kino.Input.text("Name")
    ],
    submit: "Submit"
  )

Kino.listen(form, fn event ->
  IO.inspect(event)
end)

form
```

```elixir
details = ["peter", 332, 32.2, true, :active]
  Enum.at(details, 4)

# IO.put_chars(List.replace_at(details, 1, 334))

details = [:adult | details]

details ++ [nil, 123]
```

```elixir
# tuples

hobbies = {"sports", "coffee", "writing"}

elem(hobbies, 0)
put_elem(hobbies, 2, "fishing")
hobbies = Tuple.append(hobbies, "coding")
```

```elixir
IO.inspect(hobbies)
tuple_size(hobbies)
```

## Maps

```elixir
map = %{:hello => "World", 32 => :age, "height" => 190.32}

# If the key is an atom, you can access its value using the dot-notation
map["height"]

Map.get(map, 32)
Map.drop(map, [32])
```

```elixir
IO.inspect(map)
```

```elixir
# redefine map with atom keys
map = %{hello: "world", age: 32, height: 190.23}
IO.inspect(map)

map.age
```

```elixir
Map.put(map, :age, 33)
```

```elixir
%{map | age: 33, hello: "peter"}

# Map keys are not ordered and if you iterate over the elements of a map, you cannot expect that the "first" key will always be the same.

```

```elixir
IO.inspect(map)
Enum.map(map, fn {key, _value} -> IO.inspect(key) end)
```

## keyword lists

```elixir
keyword = [name: "Peter", age: 32, name: "Pietah"]

keyword[:name] #only the first name

Keyword.get(keyword, :name)
Keyword.replace(keyword, :age, 33)
Keyword.get(keyword, :age)
```

## Modules

```elixir
defmodule RunElixir.Profile do

  @legal_age 18

  # just to access module attribute
  def legal_age, do: @legal_age

  # question mark in function is used to indicate a boolean value
  def adult?(age) do
    if age_valid?(age) do
      age >= @legal_age
    else
      raise "Invalide age #{age}"
    end
  end
  
  # This is a private function. You can call it only from inside the module.
  defp age_valid?(age) do
    age >= 0
  end
end
```

```elixir
RunElixir.Profile.adult?(19)
```

```elixir
defmodule RunElixir.Checker do

  # Either you call the module using its full namespace:
  def check_age(profile) do
    RunElixir.Profile.adult?(profile.age)
  end

  # Or, you alias its name:
  alias RunElixir.Profile # <- This and import usually go to the top of the module.

  def check_age_aliased(profile) do
    Profile.adult?(profile.age)
  end

  # Or, you import specific or all functions:
  import RunElixir.Profile, only: [adult?: 1] # Remove the 'only: ...' to import all functions

  def check_age_imported(profile) do
    adult?(profile.age)
  end

  # You can also delegate a function call to another module
  # You can't change the arguments, but you can change the function name.
  defdelegate check_adult?(age), to: RunElixir.Profile, as: :adult?
end


```

```elixir
RunElixir.Checker.check_age(%{age: 18}) # => true
RunElixir.Checker.check_age_aliased(%{age: 18}) # => true
RunElixir.Checker.check_age_imported(%{age: 18}) # => true
RunElixir.Checker.check_adult?(18) # => true
```

### Some notes

* there is no type required when specifying the module so you need to be aware of what is being passed in
* prefer the import of only specific functions to simplify the code. However... the full path makes it clear what is being referenced

## Structs

```elixir
# Struct is an extension of Map and is defined inside a Module. 

defmodule RunElixir.Card do
  defstruct [:name, :age, status: :active] # set default value of status to active

  # The % sign indicates that the function is requiring a struct
  def adult?(%RunElixir.Card{age: age}) do
    age >= 18
  end
end
```

```elixir
  struct = %RunElixir.Card{name: "peter", age: 32}

struct.age
```

## Functions

```elixir
defmodule RunElixir.Check do

  #this clause will be evaluated first.
  # it matches against integer values from 18-150
  # The >= and <= operators are called 'gaurds'

  def adult?(age) when is_integer(age) and age >= 18 and age <= 150 do
    true
  end

  # note that if the age was 18 it would match the function clause above
  def adult?(age) when is_integer(age) and age >=0 do
    false
  end

  def adult?(age), do: raise "invalid age: #{age}"
end
```

```elixir
defmodule RunElixir.Prof do
  @legal_age 18

  def adult?(age, legal_age \\ @legal_age) do
    age >= legal_age
  end
end
```

```elixir
RunElixir.Prof.adult?(17, 16)
```

```elixir
RunElixir.Profile.legal_age()
```

```elixir
defmodule RunElixir.ProfileChecker do
  @legal_age 18

  # function head to define default values (no body)
  def adult?(age, legal_age \\ @legal_age)

  def adult?(age, legal_age) when age >= legal_age do
    true
  end

  def adult?(age, legal_age) when age >= 0 and age < legal_age do
    false
  end

  def adult?(age, _legal_age), do: raise("Invalid age: #{age}")
end
```

```elixir
RunElixir.ProfileChecker.adult?(23, 24)
```

```elixir
# function arity  (how many arguments to expect)
RunElixir.Profile.__info__(:functions)
```

```elixir
# anonymous functions

add = fn a, b -> a + b end
add.(1,2)

ran = fn a -> Enum.random(1..a) end
ran.(100)

```

```elixir
# closures ... caputer the value of 'value' at the moment the function is defined

value = 20
lazy_evaluate = fn div -> value * 10.0e10 / div end
lazy_evaluate.(2048)
```

```elixir
value = 30
lazy_evaluate.(2048)
```

```elixir
# short hand notation

fun = &(&1 + &2)
fun.(4,3)
```

```elixir
# # First, we install the Req library.
# Mix.install([{:req, "~> 0.5.0"}])

# defmodule RunElixir.Jokes do
#   def get_dad_joke(callback_fn) do
#     # This will execute an anonymous function in an async process and
#     # execute the callback function with the result.
#     # We will discuss async functions later on.
#     spawn(fn ->
#       joke = Req.get!("https://icanhazdadjoke.com", headers: [accept: "text/plain"])
#       callback_fn.(joke)
#     end)
#   end
# end
```

## Pipes

```elixir
add = fn a, b -> a + b end
mult = fn a, b -> a * b end

2
|> add.(3)
|> mult.(3)
|> IO.inspect(label: "Result")
```

```elixir
add = fn a, b -> a + b end
mult = fn a, b -> a * b end

2
|> add.(3)
|> then(fn result -> 
  result = result * 2
  mult.(1024, result)
end)
```

```elixir
add = fn a, b -> a + b end
mult = fn a, b -> a * b end

2
|> add.(3)
|> tap(fn result ->
  IO.inspect(result, pretty: "Current")
  result *2
end)
|> mult.(5)
|> IO.inspect(label: "Result")
```

## pattern matching

```elixir
%{age: age, name: name} = %{age: 32, name: "peter", height: 190.32}
IO.inspect([age, name], label: 1)
```

```elixir
{a, _, c} = {1, 2, 3}
IO.inspect([a, c], label: 2)
```

```elixir
[a: a, b: _b, c: c] = [a: 1, b: 2, c: 3]
IO.inspect([a, c], label: 3)
```

```elixir
# But you can match against the head (first element) and tail (the rest) of a list.
[a | b] = [1, 2, 3]
IO.inspect(a, label: "5 - head")
IO.inspect(b, label: "5 - tail")
```

```elixir
# You can match (partially) in (anonymous) function clauses.
#
# This here defines an anonymous function with two clauses.
# It's the same as defining two function clauses in a module
# like we've done with 'def empty?()' above, just that
# the function isn't wrapped in a module.
fun = fn
  %{status: status} -> status
  %{age: age} -> age
end

fun.(%{status: :active, height: 190.47}) # => :active
fun.(%{age: 32, height: 190.47}) # => 32

# Or in Module functions
defmodule RunElixir.Status do
  def details(%{status: status}), do: status
  def details(%{age: age}), do: age
end
```

```elixir
fun.(%{status: :active, height: 190.47}) # => :active
# fun.(%{age: 32, height: 190.47}) # => 32
```

```elixir
# match against strings

# You can match against the end of a string
"My name is " <> name = "My name is Batman"

IO.inspect(name, label: 1)
```

```elixir
name = "Peter"

fun = fn
  %{name: ^name} -> "That's me!"
  %{name: _name} -> "That's not me."
end

fun.(%{name: "Peter"}) # => "That's me!"
fun.(%{name: "Bob"}) # => "That's not me."
```

```elixir
name = :peter

fun = fn
  ^name -> "That's me!"
  _name -> "That's not me."
end

IO.puts fun.(:peter) # Output: That's me!
IO.puts fun.(:john)  # Output: That's not me.

```

```elixir
name = "Peter"

fun = fn
  [^name] -> "That's me!"
  [_name] -> "That's not me."
end

IO.puts fun.(["Peter"]) # Output: That's me!
IO.puts fun.(["John"])  # Output: That's not me.

```

```elixir
name = "Peter"

fun = fn
  {^name} -> "That's me!"
  {_name} -> "That's not me."
end

IO.puts fun.({"Peter"}) # Output: That's me!
IO.puts fun.({"John"})  # Output: That's not me.

```

## control flow

Elixir offers four control structures: `if/unless`, `case`, `cond`, and `with`

```elixir
age = 17

result = 
  if age >= 18 do
    :adult
  else
    :minor
  end
IO.inspect(result, label: 1)

unless age >= 18 do
  raise "a minor"
end
```

The case statement is similar to switch in other languages. It allows you to state multiple clauses and tries to match your conditional against each clause.

```elixir
active_status = :active

fun = 
  fn value ->
    case value do
      %{status: ^active_status} -> :active
      %{status: _other_status} -> :inactive

      %{age: nil} -> :age_missing
      %{age: age} when is_integer(age) and age >= 18 -> :adult
      %{age: age} when is_integer(age) -> :minor

      #optional fallback
      _ -> :default
    end
  end
```

```elixir
fun.(%{status: :active}) # => :active
fun.(%{status: :foobar}) # => :inactive

fun.(%{age: nil}) # => :age_missing
fun.(%{age: 18}) # => :adult
fun.(%{age: 17}) # => :minor

fun.(nil) # => :default
```

```elixir
adult? fn age -> age >= 18 end

fun =
  fn value ->
    cond do
      value == :active -> :active
      is_integer(value) && adult?.(value) -> :adult
      is_integer(value) -> :minor
      true -> :default
    end
  end
```

```elixir
adult? = fn age -> age >= 18 end
details = %{name: "Peter", age: 32}

# Instead of writing nested if- or case-statements like this:
check_access = fn details ->
  case details do
    %{age: age} ->
      if adult?.(age) do
        :ok
      else
        {:error, :not_adult}
      end

    _ ->
      {:error, :age_missing}
  end
end

# Rather use one with-statement like this:
check_access_refactored = fn details ->
  with %{age: age} <- details,
       true <- adult?.(age) do
    :ok
  else
    # Gets executed if any of the matches above fails.
    %{} -> {:error, :age_missing}
    false -> {:error, :not_adult}
  end
end
```

```elixir
defmodule RunElixir.Permissions do
  def check_access(details) do
    with {:ok, age} <- get_age(details),
         :ok <- check_adult(age) do
      :ok
    end
  end

  # Moving each step into a small helper function gives you the flexibility
  # to decide which error to return inside the function.
  defp get_age(details) do
    case details do
      %{age: age} when is_integer(age) -> {:ok, age}
      %{age: _age} -> {:error, :age_invalid}
      _ -> {:error, :age_missing}
    end
  end

  defp check_adult(age) do
    if age >= 18, do: :ok, else: {:error, :not_adult}
  end
end

RunElixir.Permissions.check_access(%{age: 32}) # => :ok
RunElixir.Permissions.check_access(%{age: nil}) # => {:error, :age_invalid}
RunElixir.Permissions.check_access(%{name: "Peter"}) # => {:error, :age_missing}
RunElixir.Permissions.check_access(%{age: 17}) # => {:error, :not_adult}
```

## Loops

```elixir
result = for idx <- 1..10//1, do: idx
IO.inspect(result, label: "range-asc")

result = for idx <- 10..1//-3, do: idx
IO.inspect(result, label: "range-dec")

my_list = ["Peter", 32, 190.47, :active]
result = for el <- my_list, do: el
IO.inspect(result, label: "elements")

# nested
result = for x <- [1, 2, 6], y <- [4, 5, 7], do: [x: x, y: y]
IO.inspect(result, label: "nested")
```

```elixir
# Enum helpers

Enum.map([1, 2, 3], fn x -> x * 2 end) # return result
Enum.each([1, 2, 3], fn x -> x * 2 end) # don't return result

Enum.reduce([1, 2, 3], 1, fn x, acc -> acc + x end)

Enum.filter([1, 2, 3, 2, 4], fn x -> x === 2 end)

Enum.reject([1, 2, 3], fn x -> x == 2 end)
```

```elixir
# recursive functions

defmodule RunElixir.Loop do
  def loop(collection, fun), do: do_loop(collection, [], fun)

  # Applies an anonymous function to each element and returns the result as list.
  defp do_loop([], result, _fun), do: Enum.reverse(result) #base 

# The reason we reverse the list is that we are prepending elements to the accumulator
# result in the next clause. Prepending is efficient in Elixir, but it results in the
# order being reversed. So, we reverse it at the end to maintain the original order.
  
  defp do_loop([value | rest], result, fun), do: do_loop(rest, [fun.(value) | result], fun)
end

RunElixir.Loop.loop([1, 2, 3], &(&1 * 2))
# => [2, 4, 6]
```
